«EXTENSION xtend::Helper»
«EXTENSION xtend::DataType»
«EXTENSION xtend::Names»
/** 
* Creates the generalization (extends Interface1, Interface2 und so on) for the given
* uml::Interface
*/
«DEFINE generalization FOR uml::Interface»
	«IF !generalization.isEmpty»
	extends «FOREACH generalization AS g SEPARATOR ","»«g.general.fqName()»«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

/**
* Creates the generalization (extends SuperClass) for the given uml::Class
*/
«DEFINE generalization FOR uml::Class»
	«IF !generalization.isEmpty»
	extends «((uml::Generalization) generalization.get(0)).general.fqName()»
	«ENDIF»
«ENDDEFINE»

/**
* Creates the generalization (extends Interface1, Interface2 and so on) for the given JavaBasic::Entity
* for the generating Interface
* The interface extends another interface if the entity inherits from an interface,
* or inherits from another entity.
*/
«DEFINE generalizationEntityInterface FOR uml::Class»
	«IF !generalization.isEmpty»
	«LET ((uml::Generalization) generalization.get(0)).general AS gen»
	«IF gen.typeOf(uml::Interface)»
			extends «gen.fqName()»
		«ELSEIF !gen.getAppliedStereotypes().isEmpty»
			extends «gen.getFQNPackageName()+"."+interfaceName(gen.name)»
		«ENDIF»
	«ENDLET»
	«ENDIF»
«ENDDEFINE»

/**
* Creates the generalization (extends Interface1, Interface2 und so on) for 
* the given JavaBasic::Entity for the generating abstract class
*/
«DEFINE generalizationEntityAbstract FOR uml::Class»
	«IF !generalization.isEmpty»
		«LET ((uml::Generalization) generalization.get(0)).general AS gen»
		«IF gen.getAppliedStereotypes().isEmpty»
			extends «gen.fqName()»
		«ELSE»
			extends «gen.getFQNPackageName()+"."+abstractClassName(gen.name)»
		«ENDIF»
		«ENDLET»
	«ENDIF»
«ENDDEFINE»

/**
* Creates the operations marked as abstract in the superclass
*/
«DEFINE operation FOR uml::Class»
	«IF !generalization.isEmpty»
		«FOREACH ((uml::Generalization) generalization.get(0)).general.getOperations() AS o»
			«EXPAND Operation::operation FOR o»
		«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

/**
* Creates the operations marked as abstract in the superclass
* @param markAsAbstract Is this operation coming from an interface? Then
* mark it as abstract
*/
«DEFINE operation(boolean markAsAbstract) FOR uml::Class»
	«IF !generalization.isEmpty»
		«FOREACH ((uml::Generalization) generalization.get(0)).general.getOperations() AS o»
			«EXPAND Operation::operation(markAsAbstract) FOR o»
		«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»