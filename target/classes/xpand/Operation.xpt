«EXTENSION xtend::DataType»
«EXTENSION xtend::Helper»
«EXTENSION xtend::Misc»
«EXTENSION xtend::Properties»

/** 
* Creates an operation for an interface
*/
«DEFINE operationInterface FOR uml::Operation»
	«EXPAND operationInterfaceHead»
	«EXPAND operationInterfaceSignature»
«ENDDEFINE»

/**
* Creates the documentation and the annotation for the operation.
*/
«DEFINE operationInterfaceHead FOR uml::Operation»
	«EXPAND Documentation::documentation»
	«EXPAND operationInterfaceAnnotation»
«ENDDEFINE»

/**
* Create the interface operation signature
*/
«DEFINE operationInterfaceSignature FOR uml::Operation»
	public «IF isAbstract»abstract «ENDIF»«getReturnType(getReturnResult())» «name»(«FOREACH ownedParameter.select(e|e.direction.toString() != "return") AS p SEPARATOR ","»«p.getParameterType()» «p.name»«ENDFOREACH»)«EXPAND throwsOperationException»;
«ENDDEFINE»

/**
* Creates all operations for the given uml::Classifier
*/
«DEFINE operation FOR uml::Classifier»
	«EXPAND operation(false) FOR this»
«ENDDEFINE»
/**
* Creates all operations for the given uml::Classifier
* @param markAsAbstract Is this operation coming from an interface? Then
* markit as abstract
*/
«DEFINE operation(boolean markAsAbstract) FOR uml::Classifier»
	«FOREACH AllOperations().typeSelect(uml::Operation).select(o|!o.isAbstract) AS op»
		«EXPAND operation(markAsAbstract) FOR op»
	«ENDFOREACH»
	«FOREACH AllOperations().typeSelect(uml::Operation).select(o|o.isAbstract) AS op»
		«EXPAND operationInterface FOR op»
	«ENDFOREACH»
«ENDDEFINE»

/**
* Creates only abstract operations for the given uml::Classifier
*/
«DEFINE operationBaseImpl FOR uml::Classifier»
	«EXPAND operationBaseImpl(false) FOR this»
«ENDDEFINE»

/**
* Creates only abstract operations for the given uml::Classifier
*/
«DEFINE operationBaseImpl(boolean isMarkedAsAbstract) FOR uml::Classifier»
	«FOREACH AllOperations().typeSelect(uml::Operation).select(o|!o.isAbstract) AS op»
		«EXPAND superOperation(isMarkedAsAbstract) FOR op»
	«ENDFOREACH»
	«FOREACH AllOperations().typeSelect(uml::Operation).select(o|o.isAbstract) AS op»
		«EXPAND operation FOR op»
	«ENDFOREACH»
«ENDDEFINE»

/**
* Creates an operation for a class
*/
«DEFINE operation FOR uml::Operation»
	«EXPAND operation(false) FOR this»
«ENDDEFINE»

/**
* Creates an operation for a class
* @param markAsAbstract Is this operation coming from an interface? Then
* markit as abstract
*/
«DEFINE operation(boolean markAsAbstract) FOR uml::Operation»
	«EXPAND operationSimpleHead»
	«EXPAND operationSignature(markAsAbstract)»
	«IF !markAsAbstract»
		«EXPAND operationBodyStart»
		«EXPAND operationBody»
	«ENDIF»
	«EXPAND operationBodyEnd(markAsAbstract)»
«ENDDEFINE»

/**
* Creates the documentation and the annotation for the operation.
*/
«DEFINE operationSimpleHead FOR uml::Operation»
	«EXPAND Documentation::documentation»
	«EXPAND operationSimpleAnnotation»
«ENDDEFINE»

/**
* Create the class operation signature
*/
«DEFINE operationSignature FOR uml::Operation»
	«EXPAND operationSignature(false) FOR this»
«ENDDEFINE»

/**
* Create the class operation signature
* @param markAsAbstract Is this operation coming from an interface? Then
* markit as abstract
*/
«DEFINE operationSignature(boolean markAsAbstract) FOR uml::Operation»
	«this.VisibilityName()»«IF isStatic» static«ENDIF» «IF markAsAbstract» abstract«ENDIF» «getReturnType(getReturnResult())» «name»(«FOREACH ownedParameter.select(e|e.direction.toString() != "return") AS p SEPARATOR ","»«p.getParameterType()» «p.name»«ENDFOREACH»)«EXPAND throwsOperationException»
«ENDDEFINE»

/**
* Create the class operation default body implementations' start
*/
«DEFINE operationBodyStart FOR uml::Operation»
	{
«ENDDEFINE»
/**
* Create the class operation default body implementation
*/
«DEFINE operationBody FOR uml::Operation»
	«getReturnValue(getReturnResult())»
«ENDDEFINE»

/**
* Create the class operation default body implementations' end
*/
«DEFINE operationBodyEnd FOR uml::Operation»
	«EXPAND operationBodyEnd(false) FOR this»
«ENDDEFINE»

/**
* Create the class operation default body implementations' end
*/
«DEFINE operationBodyEnd(boolean markAsAbstract) FOR uml::Operation»
	«IF markAsAbstract»
		;
	«ELSE»
		}
	«ENDIF»
«ENDDEFINE»

/**
* Creates an operation for a class
*/
«DEFINE superOperation FOR uml::Operation»
	«EXPAND superOperation(false) FOR this»
«ENDDEFINE»

/**
* Creates an operation for a class
* @param isMarkedAsAbstract Is this superoperation marked as abstract 
* (through the generator)? Then implement a dummy method with an 
* UnsupportedOperationException
*/
«DEFINE superOperation(boolean isMarkedAsAbstract) FOR uml::Operation»
	«EXPAND operationSuperHead»
	«EXPAND superOperationSignature»
	«EXPAND superOperationBodyStart»
	«EXPAND superOperationBody(isMarkedAsAbstract)»
	«EXPAND superOperationBodyEnd»
«ENDDEFINE»

/**
* Creates the documentation and the annotation for the operation.
*/
«DEFINE operationSuperHead FOR uml::Operation»
	«EXPAND superOperationHead»
«ENDDEFINE»

/**
* Creates the documentation and the annotation for the operation.
*/
«DEFINE superOperationHead FOR uml::Operation»
	«EXPAND Documentation::documentation»
	«EXPAND operationSuperAnnotation»
«ENDDEFINE»

/**
* Create the class operation signature
*/
«DEFINE superOperationSignature FOR uml::Operation»
	«this.VisibilityName()»«IF isStatic» static«ENDIF» «getReturnType(getReturnResult())» «name»(«FOREACH ownedParameter.select(e|e.direction.toString() != "return") AS p SEPARATOR ","»«p.getParameterType()» «p.name»«ENDFOREACH»)«EXPAND throwsOperationException»
«ENDDEFINE»

/**
* Create the class operation default body implementations' start
*/
«DEFINE superOperationBodyStart FOR uml::Operation»
	{
«ENDDEFINE»

/**
* Create the class operation default body implementation
*/
«DEFINE superOperationBody FOR uml::Operation»
	«EXPAND superOperationBody(false) FOR this»
«ENDDEFINE»

/**
* Create the class operation default body implementation
* @param isMarkedAsAbstract Is this superoperation marked as abstract 
* (through the generator)? Then implement a dummy method with an 
* UnsupportedOperationException
*/
«DEFINE superOperationBody(boolean isMarkedAsAbstract) FOR uml::Operation»
	«IF isMarkedAsAbstract»
		// TODO Implement method «name»
       throw new UnsupportedOperationException("Method «name» not implemented");
    «ELSE»
    	
    	«IF isAbstract»
    		«IF !isVoid(getReturnResult())»
    			«getReturnValue(getReturnResult())»
    		«ENDIF»
    	«ELSE»
    		«IF !isVoid(getReturnResult())»return «ENDIF»
    		super.«name»(«FOREACH ownedParameter.select(e|e.direction.toString() != "return") AS p SEPARATOR ","»«p.name»«ENDFOREACH»);
    	«ENDIF»
	«ENDIF»		
«ENDDEFINE»
/**
* Create the class operation default body implementations' end
*/
«DEFINE superOperationBodyEnd FOR uml::Operation»
	}
«ENDDEFINE»

/**
*----- For AOP
*/

/**
* Creates the annotation for the interface operation.
*/
«DEFINE operationInterfaceAnnotation FOR uml::Operation»
	«EXPAND operationAnnotation»
«ENDDEFINE»
/**
* Creates the annotation for the operation.
*/
«DEFINE operationSimpleAnnotation FOR uml::Operation»
	«EXPAND operationAnnotation»
«ENDDEFINE»
/**
* Creates the annotation for the operation.
*/
«DEFINE operationSuperAnnotation FOR uml::Operation»
	«EXPAND operationAnnotation»
«ENDDEFINE»

/**
* Creates the annotation for the operation.
*/
«DEFINE operationAnnotation FOR uml::Operation»
«ENDDEFINE»


/**
*----- Exception handling
*/

/**
*Should be aoped in case one wants to generate the throw clause of an operation
*/
«DEFINE throwsOperationException FOR uml::Operation»
	«IF !raisedException.isEmpty»
		throws «FOREACH raisedException AS exception SEPARATOR ","»«exception.getFQNPackageName()».«exception.name»«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»


/**
* This method is a helper method available to call it from an aoped version of the throwsOperationException define.
* @param List	A list of classes which should be threated as Exception in the throws clause of the operation
*/
«DEFINE generateThrowsOperationExceptionHelper(List excList) FOR uml::Operation»
		«IF excList != null && !excList.isEmpty»
			«LET excList.select(e|uml::Type.isInstance(e)) AS theExcList»
				«IF theExcList != null && !theExcList.isEmpty»
					throws «FOREACH theExcList AS exception SEPARATOR ","»«((uml::Type)exception).getFQNPackageName()».«((uml::Type)exception).name»«ENDFOREACH»
				«ENDIF»
			«ENDLET» 
		«ENDIF»
«ENDDEFINE»
