«REM»
   Copyright 2006 The Fornax Project Team

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

 	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

	-------
	@author Thorsten Kamann <thorsten.kamann@googlemail.com>
«ENDREM»

«EXTENSION xtend::Helper»
«EXTENSION xtend::Properties»

«DEFINE enum FOR uml::Enumeration»
	«FILE getFQNPackagePathWithDefault()+"/"+name+".java"»
		«getTypeHeader()»
	
		package «getFQNPackageNameWithDefault()»;
		
		«EXPAND Documentation::documentation»
		«IF getJavaVersion() > 2»
			«EXPAND enum5 FOR this»
		«ELSE»
			«EXPAND enum2 FOR this»
		«ENDIF»
	«ENDFILE»
	«getTypeFooter()»
«ENDDEFINE»

«DEFINE enum2 FOR uml::Enumeration»
	public class «name.toFirstUpper()» implements Comparable{
		private java.util.Map enumMap = new java.util.HashMap();
		
		«FOREACH this.ownedLiteral AS e ITERATOR iter»
			«EXPAND Documentation::documentation FOR e»
			public static final «name.toFirstUpper()» «e.name.toUpperCase()» = 
				new «name.toFirstUpper()»(«iter.counter0»);
		«ENDFOREACH»
		
		/**
		* The current value of this <code>«name.toFirstUpper()»</code>
		*/
		public final int value;
		
		private «name.toFirstUpper()»(int value){
			this.value = value;
			«FOREACH this.ownedLiteral AS e ITERATOR iter»
				enumMap.put(new Integer(«iter.counter0»), "«e.name.toUpperCase()»"); 
			«ENDFOREACH»
		}
		
		/**
		* @return The String representation of this <code>«name.toFirstUpper()»</code>
		*/
		public String toString(){
			return (String) enumMap.get(new Integer(value));
		}
		
		/**
		* Compares this <code>«name.toFirstUpper()»</code> with the given
		* <code>«name.toFirstUpper()»</code>
		* @param «name.toFirstLower()» The <code>«name.toFirstUpper()»</code> 
		* to compare with
		*/
		public int compareTo(Object «name.toFirstLower()»){
			return this.compareTo(«name.toFirstLower()»);
		}
		
		/**
		* @returns An array with all <code>«name.toFirstUpper()»</code>
		*/
		public static «name.toFirstUpper()»[] values(){
			return new «name.toFirstUpper()»[]{
				«FOREACH this.ownedLiteral AS e SEPARATOR ","»
					«e.name.toUpperCase()»
				«ENDFOREACH»
			};
		}
	}
«ENDDEFINE»

«DEFINE enum5 FOR uml::Enumeration»
	public enum «name.toFirstUpper()»{
		«FOREACH this.ownedLiteral AS e SEPARATOR ","»
			«EXPAND Documentation::documentation FOR e»
			«e.name.toUpperCase()»
		«ENDFOREACH»
	}
«ENDDEFINE»