«REM»
   Copyright 2007 The Fornax Project Team

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

 	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

	-------
	author istvan.boscha@compatech.hu

«ENDREM»


«EXTENSION xtend::Helper»
«EXTENSION xtend::Properties»

/**
*	Creates a java exception class with full support for generalization
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exception(uml::boolean isUnchecked) FOR uml::Class»
	«FILE getFQNPackagePath()+"/"+name+".java"»
		«EXPAND exceptionFileContent(isUnchecked)»
	«ENDFILE»
«ENDDEFINE»

/**
*	Creates a java exception class file content
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionFileContent(uml::boolean isUnchecked) FOR uml::Class»
	«EXPAND exceptionHead(isUnchecked)»
	«EXPAND exceptionClassDefine(isUnchecked)»
		«EXPAND Attribute::attribute»
		«EXPAND Association::attribute»
		«EXPAND Attribute::staticAttribute»

		«EXPAND Attribute::getterSetter»
		«EXPAND Operation::operation»
		«EXPAND Generalization::operation»
		«EXPAND Association::accessors»
		«EXPAND exceptionCommonFileContent(isUnchecked)»
	«EXPAND exceptionClassEndDefine(isUnchecked)»
«ENDDEFINE»

/**
*	Creates a java exception class common methods
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionCommonFileContent(uml::boolean isUnchecked) FOR uml::Class»
	/**
     * Constructs a new exception with null as its detail message. 
     * The cause is not initialized, and may subsequently be initialized 
     * by a call to Throwable.initCause(java.lang.Throwable)
     *
     * @see java.lang.Throwable.initCause(java.lang.Throwable)
     */
     public «name»(){
     	super();
     }
     
     /**
     * Constructs a new runtime exception with the specified cause and a 
     * detail message of (cause==null ? null : cause.toString())  
     * (which typically contains the class and detail message of cause). 
     * This constructor is useful for runtime exceptions that are little more 
     * than wrappers for other throwables.
     *
     * @param throwable the cause (which is saved for later retrieval by the 
     * <code>java.lang.Throwable.getCause()</code> method). 
     * (A null value is permitted, and indicates that the cause is nonexistent 
     * or unknown.)
     */
    public «name»(Throwable cause){
       	super(cause);
    }

    /**
     * Constructs a new exception with the specified detail message. 
     * The cause is not initialized, and may subsequently be initialized by a 
     * call to <code>java.lang.Throwable.initCause(java.lang.Throwable)<(code>.
     *
     * @param message the detail message. The detail message is saved for later 
     * retrieval by the <code>java.lang.Throwable.getMessage()</code> method.
     */
    public «name»(String message){
        super(message);
    }

    /**
     * Constructs a new runtime exception with the specified detail message and cause.
     * Note that the detail message associated with cause is not automatically 
     * incorporated in this runtime exception's detail message. 
     *
     * @param message the detail message (which is saved for later retrieval by the 
     * <code>java.lang.Throwable.getMessage()</code> method).
     * @param cause the cause (which is saved for later retrieval by the 
     * <code>java.lang.Throwable.getCause()</code> method). 
     * (A null value is permitted, and indicates that the cause is nonexistent 
     * or unknown.)
     */
    public «name»(String message, Throwable cause){
    	super(message, cause);
    }
«ENDDEFINE»

/**
*	Creates a java exception class class definition
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionClassDefine(uml::boolean isUnchecked) FOR uml::Class»
	public «IF isAbstract»abstract«ENDIF» class «name»
			«IF !generalization.isEmpty»
				extends «((uml::Generalization) generalization.get(0)).general.fqName()»
			«ELSEIF isUnchecked»
				extends java.lang.RuntimeException
			«ELSE»
				extends java.lang.Exception
			«ENDIF»
			{
			private static final long serialVersionUID = 1L;
«ENDDEFINE»

/**
*	Creates the and of the java exception class class definition
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionClassEndDefine(uml::boolean isUnchecked) FOR uml::Class»
	}
	
	«getTypeFooter()»
«ENDDEFINE»

/**
*	Creates the head(import, docu, annotation) of the java exception class
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionHead(uml::boolean isUnchecked) FOR uml::Class»
	«getTypeHeader()»
	
	package «EXPAND getFQNPackageNameForException(isUnchecked)»;
	«EXPAND exceptionImport(isUnchecked)»
	«EXPAND Documentation::documentation»
	«EXPAND exceptionClassAnnotations(isUnchecked)»
«ENDDEFINE»

/**
*	Creates the package name of the java exception class
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE getFQNPackageNameForException(uml::boolean isUnchecked) FOR uml::Class»
	«getFQNPackageName()»
«ENDDEFINE»

/**
*	For AOP
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionImport(uml::boolean isUnchecked) FOR uml::Class»
«ENDDEFINE»

/**
*	For AOP
*   @param uml::boolean true if the exception is unchecked eg. RuntimeException, false otherwise
*/
«DEFINE exceptionClassAnnotations(uml::boolean isUnchecked) FOR uml::Class»
«ENDDEFINE»