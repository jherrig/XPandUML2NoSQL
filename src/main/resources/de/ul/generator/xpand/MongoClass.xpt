«EXTENSION xtend::Helper»
«EXTENSION xtend::Properties»
«EXTENSION xtend::Names»
«EXTENSION xtend::SerialVersionUID»
«EXTENSION xtend::AssociationHelper»
«EXTENSION xtend::DataType»

«DEFINE mongoClass FOR uml::Class»
	«FILE "MongoDB/"+ name +".java"»
		«EXPAND classContentSimple FOR this»
	«ENDFILE»
«ENDDEFINE»


«DEFINE classContentSimple FOR uml::Class»
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.DBRef;
import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoDatabase;
import java.util.List;


	public «IF isAbstract» abstract «ENDIF» class «name»
	«EXPAND Generalization::generalization»
    «EXPAND Realization::realization»{
	//MongoDB-related properties
	private final MongoClient mgClient = new MongoClient();
	private final MongoDatabase db = mgClient.getDatabase("test");
	private ObjectId «lowcaseName(name)»Id;
	private DBRef «lowcaseName(name)»DBRef;
		
	//regular class properties as designed
	«EXPAND Attribute::field FOREACH getAllProperties()-»
    «EXPAND Attribute::staticAttribute-»
	
	
	//CRUD
	«EXPAND createStmt»
	«EXPAND readStmt»
	«EXPAND updateStmt»
	«EXPAND deleteStmt»
	
	//getter+setter, ObjectId/RefID has no setter(it may only be set during the 'create' method!)
    «EXPAND Attribute::getterSetter»
	public ObjectId get«name»Id(){
		return «lowcaseName(name)»Id;
	}
	public DBRef get«name»DBRef() {
		return «lowcaseName(name)»DBRef;
	}
}
	
«ENDDEFINE»

«DEFINE relations FOR uml::Property-»
	«IF this.isAssociation()-»
		«IF this.isOutgoing()-»
			«IF this.isToManyAssociation()»
				private List<«getPropertyType()»> «name» = new List<«getPropertyType()»>();
			«ELSE»
				«EXPAND Association::field FOR this-»
			«ENDIF-»
	 	«ENDIF-»
	«ENDIF-»
«ENDDEFINE-»

«DEFINE createStmt FOR uml::Class»
	public void create«name»(){
		Document newDoc = new Document()
		«EXPAND appendAttribute FOREACH getAllProperties().select(e|e.association == null)-»;
		«EXPAND appendAssociation FOREACH getAllProperties()-»
		db.getCollection("«name»").insertOne(newDoc);
		«lowcaseName(name)»Id = (ObjectId)newDoc.get("_id");
		«lowcaseName(name)»DBRef = new DBRef("«lowcaseName(name)»", «lowcaseName(name)»Id);
	}
«ENDDEFINE-»


«DEFINE readStmt FOR uml::Class»
	public Document read«name»(){
		return db.getCollection("«name»").find(new Document("_id",«lowcaseName(name)»Id)).first();
	}
«ENDDEFINE»


«DEFINE updateStmt FOR uml::Class»
	public void update«name»(){
		«EXPAND updateAttribute FOREACH getAllProperties().select(e|e.association == null)-»
		«EXPAND updateAssociation FOREACH getAllProperties()-»
	}
«ENDDEFINE»


«DEFINE deleteStmt FOR uml::Class»
	public void delete«name»(){
		db.getCollection("«name»").deleteMany(new Document("_id",«lowcaseName(name)»Id));
	}
«ENDDEFINE»



«DEFINE appendAttribute FOR uml::Property-»
		.append("«name»", «name» )
«ENDDEFINE-»

«DEFINE appendAssociation FOR uml::Property-»
	«IF this.isAssociation()-»
		«IF this.isOutgoing()-»
			«IF isToManyAssociation()-»
		int «name»counter = 0;
		for( «getPropertyType()» i : «name» ){
			newDoc.append("«name»" + «name»counter, i.get«name»DBRef() );
			«name»counter++;
		}
			«ELSE»
		newDoc.append("«name»", «name».get«name»DBRef() );
			«ENDIF-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE-»

«DEFINE updateAttribute FOR uml::Property-»
		db.getCollection("«class.name»").updateOne(new BasicDBObject("_id", «lowcaseName(class.name)»Id),
		, new BasicDBObject("$set", new BasicDBObject("«name»", «name»)));
«ENDDEFINE-»

«DEFINE updateAssociation FOR uml::Property-»
	«IF this.isAssociation()-»
		«IF this.isOutgoing()-»
			«IF isToManyAssociation()-»
		int «name»counter = 0;
		for( «getPropertyType()» i : «name» ){
			db.getCollection("«class.name»").updateOne(new BasicDBObject("_id", «lowcaseName(this.association.memberEnd.get(0).type.name)»Id),
			, new BasicDBObject("$set", new BasicDBObject("«name»" + «name»counter, i.get«name»DBRef())));
			«name»counter++;
		}
			«ELSE-»
		db.getCollection("«class.name»").updateOne(new BasicDBObject("_id", «lowcaseName(this.association.memberEnd.get(0).type.name)»Id),
		, new BasicDBObject("$set", new BasicDBObject("«name»", «name».get«name»DBRef())));
			«ENDIF-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»
